include util.mk

SRCDIR = src/
BUILDDIR ?= build/
BSPSRCDIR = bsp/
BSPBUILDDIR = ${BUILDDIR}/bsp/
MAKE_FLAGS = -rR
PROCESSOR ?= psu_pmu_0

CROSS_COMPILE  ?= mb-
CC      = $(CROSS_COMPILE)gcc
CXX     = $(CROSS_COMPILE)g++
AS      = $(CC)
LD      = $(CROSS_COMPILE)gcc
SIZE	= $(CROSS_COMPILE)size
NM	= $(CROSS_COMPILE)nm
OBJCOPY	= $(CROSS_COMPILE)objcopy
OBJDUMP	= $(CROSS_COMPILE)objdump
HEXDUMP	?= hexdump
HSM ?= hsi
HSM_FLAGS = -mode tcl -nojournal -nolog

CFLAGS += -Wall -Wextra -Werror -Wno-unused-parameter -Os -g3
CFLAGS += -fmessage-length=0
CFLAGS += -I$(BSPBUILDDIR)$(PROCESSOR)/include
CFLAGS += -I$(BUILDDIR)include
CFLAGS += -mlittle-endian -mxl-barrel-shift -mxl-pattern-compare
CFLAGS += -mcpu=v9.2 -mxl-soft-mul
CFLAGS += -Wl,--no-relax
CFLAGS += -ftest-coverage
CFLAGS += -MMD -MP
CFLAGS += -fdiagnostics-color=auto
CFLAGS += -flto
CFLAGS += $(ECFLAGS)

CPPFLAGS += -Iinclude

ASFLAGS += $(CFLAGS)
ASFLAGS += -D__ASSEMBLY__

LDSCRIPT = $(SRCDIR)lscript.ld

LDFLAGS += $(CFLAGS)
LDFLAGS += -Wl,--fatal-warnings
LDFLAGS += -nostartfiles
LDFLAGS += -Wl,-T$(LDSCRIPT)
LDFLAGS += -L$(BSPBUILDDIR)$(PROCESSOR)/lib
LDFLAGS += -Wl,--no-relax

LDLIBS = -Wl,--start-group,-lxil,-lgcc,-lc,-lxilfpga,-lxilsecure,--end-group

HDF ?= $(realpath bsp/pmu.hdf)
ifeq (${USE_UART1},1)
    UART=psu_uart_1
else
    UART=psu_uart_0
endif

PMU_FW_C_SRCS = $(notdir $(shell [ -d $(SRCDIR) ] && find $(SRCDIR) -maxdepth 1 -name \*.c))
PMU_FW_S_SRCS = $(notdir $(shell [ -d $(SRCDIR) ] && find $(SRCDIR) -maxdepth 1 -name \*.S))
PMU_FW_s_SRCS = $(notdir $(shell [ -d $(SRCDIR) ] && find $(SRCDIR) -maxdepth 1 -name \*.s))
PMU_FW_OBJS = $(PMU_FW_C_SRCS:.c=.o)
PMU_FW_OBJS += $(PMU_FW_S_SRCS:.S=.o)
PMU_FW_OBJS += $(PMU_FW_s_SRCS:.s=.o)

S_OBJS = $(PMU_FW_OBJS)

OBJS = $(addprefix $(BUILDDIR), $(S_OBJS))

TARGET = $(BUILDDIR)xpfw.elf
TARGET_BIN = $(TARGET:.elf=.bin)
HELPER_TCL = tools/xpfw_loader/$(notdir $(TARGET:.elf=_loader.tcl))
HELPER_C = tools/xpfw_loader/$(notdir $(TARGET:.elf=_loader_inc.c))

# Create the dirs.
CREATE_BUILDDIRS = $(shell mkdir -p $(BUILDDIR)include ${BSPBUILDDIR})

all: $(CREATE_BUILDDIRS) helpers

-include $(OBJS:.o=.d)

define filechk_version.h
	echo -e "#ifndef ZYNQMP_XPFW_VERSION__H_\n\
	#define ZYNQMP_XPFW_VERSION__H_\n\
	#define ZYNQMP_XPFW_VERSION	\"`./scripts/setlocalversion 2>/dev/null`\"\n\
	#endif"
endef

$(BUILDDIR)include/xpfw_version.h: FORCE
	$(call filechk,version.h)

$(BUILDDIR)%.o: $(SRCDIR)%.c | $(BUILDDIR)include/xpfw_version.h $(BSPBUILDDIR)$(PROCESSOR)/lib/libxil.a
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(BUILDDIR)%.o: $(SRCDIR)%.S | $(BSPBUILDDIR)$(PROCESSOR)/lib/libxil.a
	$(CC) $(ASFLAGS) $(CPPFLAGS) -c $< -o $@

$(BUILDDIR)%.o: $(SRCDIR)%.s
	$(CC) $(ASFLAGS) -c $< -o $@

$(TARGET): $(BSPBUILDDIR)$(PROCESSOR)/lib/libxil.a $(LDSCRIPT) $(OBJS)
	$(LD) $(OBJS) $(LDFLAGS) $(LDLIBS) -o $@

$(TARGET_BIN): $(TARGET)
	$(OBJCOPY) -O binary $< $@

FIX_XIL_PRINTF__H = '\
	if (/xil_printf\s*\(.*\)/) { \
		unless (/attribute/) { \
			$$_ =~ s/;\s*$$/ __attribute__\(\(format\(printf, 1, 2\)\)\);\n/; \
		} \
	}'

$(BSPBUILDDIR)$(PROCESSOR)/lib/libxil.a: ${HDF}
	echo -e "\
if {[info exists ::env(HSI_REPO_PATH)]} {\\n \
	set_repo_path $$::env(HSI_REPO_PATH)\\n \
}\\n\
open_hw_design $(HDF)\\n \
set swdsgn [create_sw_design -os standalone -proc $(PROCESSOR) bsp]\\n \
add_library xilfpga\\n \
add_library xilsecure\\n \
set_property CONFIG.STDIN $(UART) [get_os]\\n \
set_property CONFIG.STDOUT $(UART) [get_os]\\n \
set_property -name {CONFIG.extra_compiler_flags} -value {-Os -flto -ffat-lto-objects} -objects [get_sw_processor]\\n \
set_property -name {APP_COMPILER_FLAGS} -value {-Os -flto -ffat-lto-objects} -objects [current_sw_design]\\n \
generate_bsp -sw \$$swdsgn -compile -dir $(BSPBUILDDIR)\\n \
quit" | MAKEFLAGS="-rRj 1" $(HSM) $(HSM_FLAGS)
	find $(BSPBUILDDIR) -type f -name xil_printf.h -exec perl -i -n -p -e $(FIX_XIL_PRINTF__H) '{}' ';'

size: $(TARGET)
	$(SIZE)	$(TARGET)

.PHONY: tags
tags:
	ctags -R $(SRCDIR)
	ctags --append --exclude=Makefile --exclude=*.make -R $(BSPBUILDDIR)$(PROCESSOR)

# Generate files to help us in downloading PMU FW on to RAM
# Output can be found in build/ directory
# TCL: ELFNAME_loader.tcl can be used from XMD on EP
# C: ELFNAME_loader.c - A standalone app that loads PMU FW
$(HELPER_TCL): $(TARGET_BIN)
	@echo "generating $@ from $<"
	@echo -e "## AUTOGENERATED FILE ##\n\
	puts \"Downloading FW...\"\n\
	mwr -f 0xffd80000 0x00000000\n\
	mwr -f 0xff310000 0x00010000\n\
	after 1000\n" > $@
	@$(HEXDUMP) -e '"mwr -f 0xffdc%04_ax 0x%08x \n"' -v $< | tac >> $@
	@echo -e	"mwr -f 0xffd80000 0x00000001\n\
	puts \"Done.\"\n\
	## EOF ##" >> $@

$(HELPER_C): $(TARGET_BIN)
	$(HEXDUMP) -e '"Xil_Out32(""0xffdc%04_ax" ", " "0x%08x"");\n"' -v $< | tac > $@

helpers: $(HELPER_TCL) $(HELPER_C)

.PHONY: cscope
cscope:
	find ${CURDIR} -type f -name "*.[chsS]" > cscope.files
	cscope -b -q -k

.PHONY: clean
clean:
	rm -rf $(TARGET) $(OBJS) $(OBJS:.o=.d) *.log *.jou \
		$(BUILDDIR)/* $(BUILDDIR)include/xpfw_version.h $(HELPER_TCL) $(HELPER_C) \
		design_1.hwh design_1_bd.tcl hwdef.xml psu_clock_registers.log
	make $(MAKE_FLAGS) -C $(BSPBUILDDIR) $@

.PHONY: distclean
distclean: clean
	rm -rf $(BUILDDIR) $(BSPBUILDDIR) tags cscope.*

.PHONY: FORCE
FORCE:
